name: CI

on:
  workflow_dispatch:
    inputs:
      newVersion:
        description: 'New version'
        required: false
        type: string

jobs:
  # -------------------------------------------------------------
  # Using GitHub's API is not supported for push events
  # -------------------------------------------------------------
  # 
  # ----------------------------------------------------------------------------------------------
  # Using local .git history
  # ----------------------------------------------------------------------------------------------
  # Event `push`: Compare the preceding remote commit -> to the current commit of the main branch 
  # ----------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Releases automation
    env:
          GH_USERNAME: ${{github.actor}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.



      - name: Install pnpm package manager
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          cache: "pnpm"
          cache-dependency-path: ./pnpm-lock.yaml

      - name: New branch
        run: |
          git config --global user.email "${GH_USERNAME}@users.noreply.github.com"
          git config --global user.name "${GH_USERNAME}"
          trimmed_version=$(echo ${{github.event.inputs.newVersion}} | rev | cut -d '.' -f 2- | rev)
          git switch -c "release/#$trimmed_version"
          git push -u "release/#$trimmed_version"

      - name: Update version
        run: |
          git config --global user.email "${GH_USERNAME}@users.noreply.github.com"
          git config --global user.name "${GH_USERNAME}"
          pnpm version ${{ github.event.inputs.newVersion }}

      - name: Tag version
        run: |
          git config --global user.email "${GH_USERNAME}@users.noreply.github.com"
          git config --global user.name "${GH_USERNAME}"
          git tag -a ${{ github.event.inputs.newVersion }} -m ""
          git push origin ${{ github.event.inputs.newVersion }}
        
      
